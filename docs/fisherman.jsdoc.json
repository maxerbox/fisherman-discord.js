[
  {
    "comment": "/**\r\n * Used to create a middleware, for documentation\r\n * @abstract\r\n * @class AbstractMiddleware\r\n */",
    "meta": {
      "filename": "AbstractMiddleware.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
      "code": {}
    },
    "description": "Used to create a middleware, for documentation",
    "virtual": true,
    "kind": "class",
    "name": "AbstractMiddleware",
    "longname": "AbstractMiddleware",
    "scope": "global",
    "$longname": "AbstractMiddleware",
    "$members": [
      {
        "comment": "/**\r\n     *  Called when a message is handled by fisherman\r\n     * @param {FisherRequest} request A FisherRequest\r\n     * @param {FisherResponse} response A FisherResponse\r\n     * @param {function} next A waterfall callback, used to pass parameters. Example: next(err=null, res, req); To stop the middleware chain, use callback(true);\r\n     * @memberof AbstractMiddleware\r\n     */",
        "meta": {
          "range": [
            914,
            955
          ],
          "filename": "AbstractMiddleware.js",
          "lineno": 25,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {
            "id": "astnode100002044",
            "name": "AbstractMiddleware#handle",
            "type": "MethodDefinition",
            "paramnames": [
              "request",
              "response",
              "next"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Called when a message is handled by fisherman",
        "params": [
          {
            "type": {
              "names": [
                "FisherRequest"
              ]
            },
            "description": "A FisherRequest",
            "name": "request"
          },
          {
            "type": {
              "names": [
                "FisherResponse"
              ]
            },
            "description": "A FisherResponse",
            "name": "response"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A waterfall callback, used to pass parameters. Example: next(err=null, res, req); To stop the middleware chain, use callback(true);",
            "name": "next"
          }
        ],
        "memberof": "AbstractMiddleware",
        "name": "handle",
        "longname": "AbstractMiddleware#handle",
        "kind": "function",
        "scope": "instance",
        "$longname": "AbstractMiddleware#handle"
      },
      {
        "comment": "/**\r\n     * Called when the the init function of fisherman is used\r\n     * @param {Fisherman} client The fisherman instance\r\n     * @param {function} next An async callback;\r\n     * @memberof AbstractMiddleware\r\n     */",
        "meta": {
          "range": [
            497,
            524
          ],
          "filename": "AbstractMiddleware.js",
          "lineno": 16,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {
            "id": "astnode100002038",
            "name": "AbstractMiddleware#setUp",
            "type": "MethodDefinition",
            "paramnames": [
              "client",
              "next"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Called when the the init function of fisherman is used",
        "params": [
          {
            "type": {
              "names": [
                "Fisherman"
              ]
            },
            "description": "The fisherman instance",
            "name": "client"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "An async callback;",
            "name": "next"
          }
        ],
        "memberof": "AbstractMiddleware",
        "name": "setUp",
        "longname": "AbstractMiddleware#setUp",
        "kind": "function",
        "scope": "instance",
        "$longname": "AbstractMiddleware#setUp"
      }
    ],
    "$constructor": {
      "comment": "",
      "meta": {
        "range": [
          135,
          268
        ],
        "filename": "AbstractMiddleware.js",
        "lineno": 7,
        "columnno": 2,
        "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
        "code": {
          "id": "astnode100002026",
          "name": "AbstractMiddleware",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "undocumented": true,
      "name": "AbstractMiddleware",
      "longname": "AbstractMiddleware",
      "kind": "class",
      "scope": "global",
      "params": [],
      "$longname": "AbstractMiddleware"
    }
  },
  {
    "comment": "/**\r\n * An abstract class, used to append commands to a register. This class has to be extended\r\n * @abstract\r\n * @class Command\r\n */",
    "meta": {
      "filename": "Command.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
      "code": {}
    },
    "description": "An abstract class, used to append commands to a register. This class has to be extended",
    "virtual": true,
    "kind": "class",
    "name": "Command",
    "longname": "Command",
    "scope": "global",
    "$longname": "Command",
    "$members": [
      {
        "comment": "/**\r\n         * An alias or an array of alias for the command\r\n         * @type {(string|string[])}\r\n         * @name Command#aliases\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 70,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "An alias or an array of alias for the command",
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "name": "aliases",
        "defaultvalue": "null",
        "memberof": "Command",
        "longname": "Command#aliases",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#aliases"
      },
      {
        "comment": "/**\r\n         * The channel type(s) where the command can be executed\r\n         * @type {(string|string[])}\r\n         * @name Command#channelType\r\n         * @default [dm,\"group\",\"text\"]\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 56,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "The channel type(s) where the command can be executed",
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "name": "channelType",
        "defaultvalue": "[dm,\"group\",\"text\"]",
        "memberof": "Command",
        "longname": "Command#channelType",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#channelType"
      },
      {
        "comment": "/**\r\n         * The perm(s) required to execute the command\r\n         * @type {(string|string[])}\r\n         * @name Command#discordPermRequired\r\n         * @default []\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 49,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "The perm(s) required to execute the command",
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "name": "discordPermRequired",
        "defaultvalue": "[]",
        "memberof": "Command",
        "longname": "Command#discordPermRequired",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#discordPermRequired"
      },
      {
        "comment": "/**\r\n         * The perm(s) required to send a invalid permission fisher code\r\n         * @type {(string|string[])}\r\n         * @name Command#discordSpecialPerms\r\n         * @default [\"SEND_MESSAGES\"]\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 42,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "The perm(s) required to send a invalid permission fisher code",
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "name": "discordSpecialPerms",
        "defaultvalue": "[\"SEND_MESSAGES\"]",
        "memberof": "Command",
        "longname": "Command#discordSpecialPerms",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#discordSpecialPerms"
      },
      {
        "comment": "/**\r\n         * If true, a fisherPromiseCallback is passed to the execute function instead of a fisherCallback\r\n         * @type {boolean}\r\n         * @name Command#isPromise\r\n         * @default false\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 77,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "If true, a fisherPromiseCallback is passed to the execute function instead of a fisherCallback",
        "type": {
          "names": [
            "boolean"
          ]
        },
        "name": "isPromise",
        "defaultvalue": "false",
        "memberof": "Command",
        "longname": "Command#isPromise",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#isPromise"
      },
      {
        "comment": "/**\r\n         * An object to store data for middlewares, or for commands\r\n         * @type {Object}\r\n         * @name Command#locales\r\n         * @default Object()\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 63,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "An object to store data for middlewares, or for commands",
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "locales",
        "defaultvalue": "Object()",
        "memberof": "Command",
        "longname": "Command#locales",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#locales"
      },
      {
        "comment": "/**\r\n         * The command's name\r\n         * @type {string}\r\n         * @name Command#name\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 14,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "The command's name",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "name",
        "defaultvalue": "null",
        "memberof": "Command",
        "longname": "Command#name",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#name"
      },
      {
        "comment": "/**\r\n         * A patterncallback to match with middleware\r\n         * @type {patternCallback}\r\n         * @name Command#patternCallback\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 35,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "A patterncallback to match with middleware",
        "type": {
          "names": [
            "patternCallback"
          ]
        },
        "name": "patternCallback",
        "defaultvalue": "null",
        "memberof": "Command",
        "longname": "Command#patternCallback",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#patternCallback"
      },
      {
        "comment": "/**\r\n         * The command's name\r\n         * @type {string}\r\n         * @name Command#register\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 21,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "The command's name",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "register",
        "defaultvalue": "null",
        "memberof": "Command",
        "longname": "Command#register",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#register"
      },
      {
        "comment": "/**\r\n         * A regPattern, to match with the command suffixe\r\n         * @type {RegExp}\r\n         * @name Command#regPattern\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "Command.js",
          "lineno": 28,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {}
        },
        "description": "A regPattern, to match with the command suffixe",
        "type": {
          "names": [
            "RegExp"
          ]
        },
        "name": "regPattern",
        "defaultvalue": "null",
        "memberof": "Command",
        "longname": "Command#regPattern",
        "scope": "instance",
        "kind": "member",
        "$longname": "Command#regPattern"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of Command.\r\n     * @param {string} [name=null] The command's name\r\n     * @param {FisherRegister} [register=null] The command's register\r\n     * @memberof Command\r\n     */",
    "meta": {
      "range": [
        364,
        2582
      ],
      "filename": "Command.js",
      "lineno": 13,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
      "code": {
        "id": "astnode100002062",
        "name": "Command",
        "type": "MethodDefinition",
        "paramnames": [
          "name",
          "register"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of Command.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "The command's name",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "FisherRegister"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "The command's register",
        "name": "register"
      }
    ],
    "memberof": "Command",
    "name": "Command",
    "longname": "Command.Command",
    "kind": "class",
    "scope": "static",
    "$longname": "Command.Command"
  },
  {
    "comment": "/**\r\n * When a command is not found\r\n * @class CommandNotFoundException\r\n * @extends {Error}\r\n */",
    "meta": {
      "filename": "CommandNotFoundException.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {}
    },
    "description": "When a command is not found",
    "kind": "class",
    "name": "CommandNotFoundException",
    "augments": [
      "Error"
    ],
    "longname": "CommandNotFoundException",
    "scope": "global",
    "$longname": "CommandNotFoundException",
    "$members": [
      {
        "comment": "/**\r\n         * The fisherCode\r\n         * @readonly\r\n         * @constant\r\n         * @name CommandNotFoundException#code\r\n         * @type {number}\r\n         * @default 404\r\n         */",
        "meta": {
          "filename": "CommandNotFoundException.js",
          "lineno": 21,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The fisherCode",
        "readonly": true,
        "kind": "constant",
        "name": "code",
        "type": {
          "names": [
            "number"
          ]
        },
        "defaultvalue": "404",
        "memberof": "CommandNotFoundException",
        "longname": "CommandNotFoundException#code",
        "scope": "instance",
        "$longname": "CommandNotFoundException#code"
      },
      {
        "comment": "/**\r\n         * The unknown command\r\n         * @type {string}\r\n         * @name CommandNotFoundException#command\r\n         * @readonly\r\n         */",
        "meta": {
          "filename": "CommandNotFoundException.js",
          "lineno": 14,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The unknown command",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "command",
        "readonly": true,
        "memberof": "CommandNotFoundException",
        "longname": "CommandNotFoundException#command",
        "scope": "instance",
        "kind": "member",
        "$longname": "CommandNotFoundException#command"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of CommandNotFoundException.\r\n     * @param {string} command the command\r\n     * @memberof CommandNotFoundException\r\n     */",
    "meta": {
      "range": [
        311,
        805
      ],
      "filename": "CommandNotFoundException.js",
      "lineno": 12,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {
        "id": "astnode100000006",
        "name": "CommandNotFoundException",
        "type": "MethodDefinition",
        "paramnames": [
          "command"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of CommandNotFoundException.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the command",
        "name": "command"
      }
    ],
    "memberof": "CommandNotFoundException",
    "name": "CommandNotFoundException",
    "longname": "CommandNotFoundException.CommandNotFoundException",
    "kind": "class",
    "scope": "static",
    "$longname": "CommandNotFoundException.CommandNotFoundException"
  },
  {
    "comment": "/**\r\n * @typedef {Object} DefaultCommandOptions The command options\r\n * @param {string} [name=null] The command's name\r\n * @param {(FisherCallback|FisherPromiseCallback)} [execute=function] A FisherCallback or a fisherPromiseCallback to execute\r\n * @param {FisherRegister} [register=null] The command's register\r\n * @param {RegExp} [regPattern=null] A regexp pattner to match with the command's suffix\r\n * @param {PatternCallback} [patternCallback=null] A patterncallback to match with middleware\r\n * @param {string[]} [discordSpecialPerms=\"SEND_MESSAGES\"] The perm(s) required to send a invalid permission fisher code\r\n * @param {string[]} [discordPermRequired=Array()] The perm(s) required to execute the command\r\n * @param {(string|string[])} [channelType=Array(\"dm\", \"group\", \"text\")] The channel type(s) where the command can be executed, see https://discord.js.org/#/docs/main/stable/class/Channel?scrollTo=type\r\n * @param {Object} [locales={}] An object to store data for middlewares, or for commands\r\n * @param {(string|string[])} [aliases=null] An alias or an array of alias for the command\r\n * @param {boolean} [isPromise=false] If true, a fisherPromiseCallback is passed to the execute function instead of a FisherCallback\r\n */",
    "meta": {
      "filename": "DefaultCommandOptions.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util",
      "code": {}
    },
    "kind": "typedef",
    "name": "DefaultCommandOptions",
    "type": {
      "names": [
        "Object"
      ]
    },
    "description": "The command options",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "The command's name",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "FisherCallback",
            "FisherPromiseCallback"
          ]
        },
        "optional": true,
        "defaultvalue": "function",
        "description": "A FisherCallback or a fisherPromiseCallback to execute",
        "name": "execute"
      },
      {
        "type": {
          "names": [
            "FisherRegister"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "The command's register",
        "name": "register"
      },
      {
        "type": {
          "names": [
            "RegExp"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "A regexp pattner to match with the command's suffix",
        "name": "regPattern"
      },
      {
        "type": {
          "names": [
            "PatternCallback"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "A patterncallback to match with middleware",
        "name": "patternCallback"
      },
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "optional": true,
        "defaultvalue": "\"SEND_MESSAGES\"",
        "description": "The perm(s) required to send a invalid permission fisher code",
        "name": "discordSpecialPerms"
      },
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "optional": true,
        "defaultvalue": "Array()",
        "description": "The perm(s) required to execute the command",
        "name": "discordPermRequired"
      },
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "optional": true,
        "defaultvalue": "Array(\"dm\", \"group\", \"text\")",
        "description": "The channel type(s) where the command can be executed, see https://discord.js.org/#/docs/main/stable/class/Channel?scrollTo=type",
        "name": "channelType"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object to store data for middlewares, or for commands",
        "name": "locales"
      },
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "An alias or an array of alias for the command",
        "name": "aliases"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "If true, a fisherPromiseCallback is passed to the execute function instead of a FisherCallback",
        "name": "isPromise"
      }
    ],
    "longname": "DefaultCommandOptions",
    "scope": "global",
    "$longname": "DefaultCommandOptions"
  },
  {
    "comment": "/**\r\n * @typedef {function} FisherCallback The command's execution function\r\n * @param {FisherRequest} req A request object\r\n * @param {FisherResponse} res A response object\r\n */",
    "meta": {
      "filename": "register.js",
      "lineno": 175,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
      "code": {}
    },
    "kind": "typedef",
    "name": "FisherCallback",
    "type": {
      "names": [
        "function"
      ]
    },
    "description": "The command's execution function",
    "params": [
      {
        "type": {
          "names": [
            "FisherRequest"
          ]
        },
        "description": "A request object",
        "name": "req"
      },
      {
        "type": {
          "names": [
            "FisherResponse"
          ]
        },
        "description": "A response object",
        "name": "res"
      }
    ],
    "longname": "FisherCallback",
    "scope": "global",
    "$longname": "FisherCallback"
  },
  {
    "comment": "/**\r\n * @typedef {Object} FisherCode A list of the FisherCode triggered by fisherman\r\n * @property {number} [COMMAND_SUCESS=200] When the command sucessed (sent only with a Promise command).\r\n * @property {number} [ALIAS_COMMAND=300] If enabled, send a code when a alias is found.\r\n * @property {number} [INVALID_PATTERN=303] Sent when the patnern is not respected, allow to send an \"usage\" of the command.\r\n * @property {number} [INVALID_CHANNEL_TYPE=400] If this is not the right type of channel, it sends a 300 code.\r\n * @property {number} [MISSING_LOCALES_PERMISSIONS=401] Used for middleware, for missing local permissions.\r\n * @property {number} [MISSING_DISCORD_PERMISSIONS=403] If the command require special discord permissions, like send messages in the channel, and the bot don't have them, a 403 code is sent. >See https://discord.js.org/#/docs/main/stable/class/Permissions?scrollTo=s-FLAGS\r\n * @property {number} [COMMAND_NOT_FOUND=404] If enabled, send a 404 code when the command is not found.\r\n * @property {number} [COMMAND_FAILED=500] When the command failed, with a reject() promise, or an error is thrown\r\n * @property {number} [MIDDLEWARE_FAILED=503] When an error is passed in the middleware callback, or an error is thrown\r\n */",
    "meta": {
      "filename": "FisherCodes.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util",
      "code": {}
    },
    "kind": "typedef",
    "name": "FisherCode",
    "type": {
      "names": [
        "Object"
      ]
    },
    "description": "A list of the FisherCode triggered by fisherman",
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 200,
        "description": "When the command sucessed (sent only with a Promise command).",
        "name": "COMMAND_SUCESS"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 300,
        "description": "If enabled, send a code when a alias is found.",
        "name": "ALIAS_COMMAND"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 303,
        "description": "Sent when the patnern is not respected, allow to send an \"usage\" of the command.",
        "name": "INVALID_PATTERN"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 400,
        "description": "If this is not the right type of channel, it sends a 300 code.",
        "name": "INVALID_CHANNEL_TYPE"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 401,
        "description": "Used for middleware, for missing local permissions.",
        "name": "MISSING_LOCALES_PERMISSIONS"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 403,
        "description": "If the command require special discord permissions, like send messages in the channel, and the bot don't have them, a 403 code is sent. >See https://discord.js.org/#/docs/main/stable/class/Permissions?scrollTo=s-FLAGS",
        "name": "MISSING_DISCORD_PERMISSIONS"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 404,
        "description": "If enabled, send a 404 code when the command is not found.",
        "name": "COMMAND_NOT_FOUND"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 500,
        "description": "When the command failed, with a reject() promise, or an error is thrown",
        "name": "COMMAND_FAILED"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 503,
        "description": "When an error is passed in the middleware callback, or an error is thrown",
        "name": "MIDDLEWARE_FAILED"
      }
    ],
    "longname": "FisherCode",
    "scope": "global",
    "$longname": "FisherCode"
  },
  {
    "comment": "/**\r\n * The main fisherman class, to create commands and interact with them\r\n * @author Maxerbox | Simon Sassi 2017\r\n * @extends {EventEmitter}\r\n * @class Fisherman\r\n */",
    "meta": {
      "filename": "fisherman.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
      "code": {}
    },
    "description": "The main fisherman class, to create commands and interact with them",
    "author": [
      "Maxerbox | Simon Sassi 2017"
    ],
    "augments": [
      "EventEmitter"
    ],
    "kind": "class",
    "name": "Fisherman",
    "longname": "Fisherman",
    "scope": "global",
    "$longname": "Fisherman",
    "$members": [
      {
        "comment": "/**\r\n     * Create a Fisherman instance from an already logged in discord.js client\r\n     *\r\n     * @static\r\n     * @param {Client} client The discord.js client\r\n     * @param {FishermanOptions} fisherOptions The options for Fisherman\r\n     * @memberof Fisherman\r\n     */",
        "meta": {
          "range": [
            3972,
            4123
          ],
          "filename": "fisherman.js",
          "lineno": 114,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100000449",
            "name": "Fisherman.createFromClient",
            "type": "MethodDefinition",
            "paramnames": [
              "client",
              "fisherOptions"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a Fisherman instance from an already logged in discord.js client",
        "scope": "static",
        "params": [
          {
            "type": {
              "names": [
                "Client"
              ]
            },
            "description": "The discord.js client",
            "name": "client"
          },
          {
            "type": {
              "names": [
                "FishermanOptions"
              ]
            },
            "description": "The options for Fisherman",
            "name": "fisherOptions"
          }
        ],
        "memberof": "Fisherman",
        "name": "createFromClient",
        "longname": "Fisherman.createFromClient",
        "kind": "function",
        "$longname": "Fisherman.createFromClient"
      },
      {
        "comment": "/**\r\n         * All the command aliases handled by fisherman\r\n         * @name Fisherman#aliases\r\n         * @type {Map.<string, Command>}\r\n         */",
        "meta": {
          "filename": "fisherman.js",
          "lineno": 53,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "All the command aliases handled by fisherman",
        "name": "aliases",
        "type": {
          "names": [
            "Map.<string, Command>"
          ]
        },
        "memberof": "Fisherman",
        "longname": "Fisherman#aliases",
        "scope": "instance",
        "kind": "member",
        "$longname": "Fisherman#aliases"
      },
      {
        "comment": "/**\r\n         * The discord js client used by fisherman\r\n         * @name Fisherman#client\r\n         * @type {Client}\r\n         */",
        "meta": {
          "filename": "fisherman.js",
          "lineno": 238,
          "columnno": 7,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "The discord js client used by fisherman",
        "name": "client",
        "type": {
          "names": [
            "Client"
          ]
        },
        "memberof": "Fisherman",
        "longname": "Fisherman#client",
        "scope": "instance",
        "kind": "member",
        "$longname": "Fisherman#client"
      },
      {
        "comment": "/**\r\n         * All the commands handled by fisherman\r\n         * @name Fisherman#commands\r\n         * @type {Map.<string, Command>}\r\n         */",
        "meta": {
          "filename": "fisherman.js",
          "lineno": 47,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "All the commands handled by fisherman",
        "name": "commands",
        "type": {
          "names": [
            "Map.<string, Command>"
          ]
        },
        "memberof": "Fisherman",
        "longname": "Fisherman#commands",
        "scope": "instance",
        "kind": "member",
        "$longname": "Fisherman#commands"
      },
      {
        "comment": "/**\r\n     * Create a new register to add commands\r\n     * @fires Fisherman#registerAdded\r\n     * @param {string} keyName The register key value, to set in the registers map\r\n     * @param {string} [registerName = null] The register's name\r\n     * @param {string} [registerDescription = null] The register's description\r\n     * @return {FisherRegister} Return a FisherRegister instance\r\n     * @memberof Fisherman\r\n     */",
        "meta": {
          "range": [
            10017,
            10354
          ],
          "filename": "fisherman.js",
          "lineno": 278,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100001057",
            "name": "Fisherman#createRegister",
            "type": "MethodDefinition",
            "paramnames": [
              "keyName",
              "registerName",
              "registerDescription"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Create a new register to add commands",
        "fires": [
          "Fisherman#event:registerAdded"
        ],
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The register key value, to set in the registers map",
            "name": "keyName"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": null,
            "description": "The register's name",
            "name": "registerName"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": null,
            "description": "The register's description",
            "name": "registerDescription"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FisherRegister"
              ]
            },
            "description": "Return a FisherRegister instance"
          }
        ],
        "memberof": "Fisherman",
        "name": "createRegister",
        "longname": "Fisherman#createRegister",
        "kind": "function",
        "scope": "instance",
        "$longname": "Fisherman#createRegister"
      },
      {
        "comment": "/**\r\n     * Emitted when a new command is added\r\n     * @event Fisherman#commandAdded\r\n     * @param {Command}\r\n     */",
        "meta": {
          "filename": "register.js",
          "lineno": 118,
          "columnno": 4,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "Emitted when a new command is added",
        "kind": "event",
        "name": "commandAdded",
        "params": [
          {
            "type": {
              "names": [
                "Command"
              ]
            }
          }
        ],
        "memberof": "Fisherman",
        "longname": "Fisherman#event:commandAdded",
        "scope": "instance",
        "$longname": "Fisherman#event:commandAdded"
      },
      {
        "comment": "/**\r\n     * Emitted when a fisherCode is by the router, or when something bad happenned\r\n     * @event Fisherman#fisherCode\r\n     * @param {FisherRouter} router the router\r\n     * @param {FisherCode} code the fisherman code\r\n     * @param {Error} err the error\r\n     */",
        "meta": {
          "filename": "response.js",
          "lineno": 33,
          "columnno": 4,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "Emitted when a fisherCode is by the router, or when something bad happenned",
        "kind": "event",
        "name": "fisherCode",
        "params": [
          {
            "type": {
              "names": [
                "FisherRouter"
              ]
            },
            "description": "the router",
            "name": "router"
          },
          {
            "type": {
              "names": [
                "FisherCode"
              ]
            },
            "description": "the fisherman code",
            "name": "code"
          },
          {
            "type": {
              "names": [
                "Error"
              ]
            },
            "description": "the error",
            "name": "err"
          }
        ],
        "memberof": "Fisherman",
        "longname": "Fisherman#event:fisherCode",
        "scope": "instance",
        "$longname": "Fisherman#event:fisherCode"
      },
      {
        "comment": "/**\r\n     *  Emitted when Fisherman and middlewares are initialized\r\n     * @event Fisherman#initialized\r\n     */",
        "meta": {
          "filename": "fisherman.js",
          "lineno": 234,
          "columnno": 4,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "Emitted when Fisherman and middlewares are initialized",
        "kind": "event",
        "name": "initialized",
        "memberof": "Fisherman",
        "longname": "Fisherman#event:initialized",
        "scope": "instance",
        "$longname": "Fisherman#event:initialized"
      },
      {
        "comment": "/**\r\n     * Emitted when a new register is added\r\n     * @event Fisherman#registerAdded\r\n     */",
        "meta": {
          "filename": "fisherman.js",
          "lineno": 279,
          "columnno": 4,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "Emitted when a new register is added",
        "kind": "event",
        "name": "registerAdded",
        "memberof": "Fisherman",
        "longname": "Fisherman#event:registerAdded",
        "scope": "instance",
        "$longname": "Fisherman#event:registerAdded"
      },
      {
        "comment": "/**\r\n         * Used to instantiate the FisherRouter\r\n         * @name Fisherman#fisherRouterInstancer\r\n         * @type {FisherRouter}\r\n         */",
        "meta": {
          "filename": "fisherman.js",
          "lineno": 27,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "Used to instantiate the FisherRouter",
        "name": "fisherRouterInstancer",
        "type": {
          "names": [
            "FisherRouter"
          ]
        },
        "memberof": "Fisherman",
        "longname": "Fisherman#fisherRouterInstancer",
        "scope": "instance",
        "kind": "member",
        "$longname": "Fisherman#fisherRouterInstancer"
      },
      {
        "comment": "/**\r\n     * Initialize Fisherman and the middlewares\r\n     * @param {string} [token = null] The token to log in with, optional if the client is already connected\r\n     * @param {function} callback An optional callback to trigger when Fisherman is initialized, an err is passed\r\n     * @example .init('token', err => {if(err) throw err})\r\n     * @memberof Fisherman\r\n     * @fires Fisherman#initialized\r\n     */",
        "meta": {
          "range": [
            8656,
            9216
          ],
          "filename": "fisherman.js",
          "lineno": 233,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100000960",
            "name": "Fisherman#init",
            "type": "MethodDefinition",
            "paramnames": [
              "token",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Initialize Fisherman and the middlewares",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "optional": true,
            "defaultvalue": null,
            "description": "The token to log in with, optional if the client is already connected",
            "name": "token"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "An optional callback to trigger when Fisherman is initialized, an err is passed",
            "name": "callback"
          }
        ],
        "examples": [
          ".init('token', err => {if(err) throw err})"
        ],
        "memberof": "Fisherman",
        "fires": [
          "Fisherman#event:initialized"
        ],
        "name": "init",
        "longname": "Fisherman#init",
        "kind": "function",
        "scope": "instance",
        "$longname": "Fisherman#init"
      },
      {
        "comment": "/**\r\n         * All the command registers handled by fisherman\r\n         * @name Fisherman#registers\r\n         * @type {Map.<string, FisherRegister>}\r\n         */",
        "meta": {
          "filename": "fisherman.js",
          "lineno": 59,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "All the command registers handled by fisherman",
        "name": "registers",
        "type": {
          "names": [
            "Map.<string, FisherRegister>"
          ]
        },
        "memberof": "Fisherman",
        "longname": "Fisherman#registers",
        "scope": "instance",
        "kind": "member",
        "$longname": "Fisherman#registers"
      },
      {
        "comment": "/**\r\n     * Set the options to fisherman\r\n     *\r\n     * @param {FishermanOptions} options\r\n     * @memberof Fisherman\r\n     */",
        "meta": {
          "range": [
            2720,
            3229
          ],
          "filename": "fisherman.js",
          "lineno": 80,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100000301",
            "name": "Fisherman#setOptions",
            "type": "MethodDefinition",
            "paramnames": [
              "options"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set the options to fisherman",
        "params": [
          {
            "type": {
              "names": [
                "FishermanOptions"
              ]
            },
            "name": "options"
          }
        ],
        "memberof": "Fisherman",
        "name": "setOptions",
        "longname": "Fisherman#setOptions",
        "kind": "function",
        "scope": "instance",
        "$longname": "Fisherman#setOptions"
      },
      {
        "comment": "/**\r\n     *\r\n     * Set the prefixe\r\n     * @param {(Array|string)} prefixes\r\n     * @memberof Fisherman\r\n     */",
        "meta": {
          "range": [
            3354,
            3691
          ],
          "filename": "fisherman.js",
          "lineno": 98,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100000391",
            "name": "Fisherman#setPrefixe",
            "type": "MethodDefinition",
            "paramnames": [
              "prefixes"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Set the prefixe",
        "params": [
          {
            "type": {
              "names": [
                "Array",
                "string"
              ]
            },
            "name": "prefixes"
          }
        ],
        "memberof": "Fisherman",
        "name": "setPrefixe",
        "longname": "Fisherman#setPrefixe",
        "kind": "function",
        "scope": "instance",
        "$longname": "Fisherman#setPrefixe"
      },
      {
        "comment": "/**\r\n     *\r\n     * Add a middleware to Fisherman\r\n     * @param {(function|Object)} middleware The middleware function|class\r\n     * @return {Fisherman}\r\n     * @memberof Fisherman\r\n     */",
        "meta": {
          "range": [
            10554,
            10778
          ],
          "filename": "fisherman.js",
          "lineno": 294,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100001089",
            "name": "Fisherman#use",
            "type": "MethodDefinition",
            "paramnames": [
              "middleware"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a middleware to Fisherman",
        "params": [
          {
            "type": {
              "names": [
                "function",
                "Object"
              ]
            },
            "description": "The middleware function|class",
            "name": "middleware"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Fisherman"
              ]
            }
          }
        ],
        "memberof": "Fisherman",
        "name": "use",
        "longname": "Fisherman#use",
        "kind": "function",
        "scope": "instance",
        "$longname": "Fisherman#use"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of Fisherman.\r\n     * @param {FishermanOptions} options The options for fisherman\r\n     * @memberof Fisherman\r\n     */",
    "meta": {
      "range": [
        1039,
        2583
      ],
      "filename": "fisherman.js",
      "lineno": 25,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
      "code": {
        "id": "astnode100000214",
        "name": "Fisherman",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of Fisherman.",
    "params": [
      {
        "type": {
          "names": [
            "FishermanOptions"
          ]
        },
        "description": "The options for fisherman",
        "name": "options"
      }
    ],
    "memberof": "Fisherman",
    "name": "Fisherman",
    "longname": "Fisherman.Fisherman",
    "kind": "class",
    "scope": "static",
    "$longname": "Fisherman.Fisherman"
  },
  {
    "comment": "/**\r\n * @typedef {Object} FishermanOptions The fisherman's options\r\n * @param {(string|string[])} [prefixes=null] A string or an array of prefixes. If it's set to null, only the mention the bot will be used\r\n * @param {string} [ownerID=null] The discord owner's id\r\n * @param {string} [commandMatchRegExp=string] Nothing to change here, that's the regex expression used to slipt the command and the suffixe\r\n * @param {boolean} [sendAliasStatus=false] If it's set to true, it will emit the code ALIAS_COMMAND: 300 when an alias is used\r\n * @param {boolean} [sendNotFoundStatus=false] If it's set to true, it will emit the code COMMAND_NOT_FOUND: 404 when athe command is not found\r\n * @param {boolean} [selfMessageProcessing=false] If enabled, the bot will proceed his own messages as command, and the middleware loop will handle them.\r\n * @param {Object} [clientOptions={}] The options to pass to the client, see https://discord.js.org/#/docs/main/stable/typedef/ClientOptions\r\n * @param {Client} [client=null] *Required. The discord.js clien. See >> https://discord.js.org/#/docs/main/stable/class/Client\r\n */",
    "meta": {
      "filename": "FishermanOptions.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util",
      "code": {}
    },
    "kind": "typedef",
    "name": "FishermanOptions",
    "type": {
      "names": [
        "Object"
      ]
    },
    "description": "The fisherman's options",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "A string or an array of prefixes. If it's set to null, only the mention the bot will be used",
        "name": "prefixes"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "The discord owner's id",
        "name": "ownerID"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "string",
        "description": "Nothing to change here, that's the regex expression used to slipt the command and the suffixe",
        "name": "commandMatchRegExp"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "If it's set to true, it will emit the code ALIAS_COMMAND: 300 when an alias is used",
        "name": "sendAliasStatus"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "If it's set to true, it will emit the code COMMAND_NOT_FOUND: 404 when athe command is not found",
        "name": "sendNotFoundStatus"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "If enabled, the bot will proceed his own messages as command, and the middleware loop will handle them.",
        "name": "selfMessageProcessing"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "The options to pass to the client, see https://discord.js.org/#/docs/main/stable/typedef/ClientOptions",
        "name": "clientOptions"
      },
      {
        "type": {
          "names": [
            "Client"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "description": "*Required. The discord.js clien. See >> https://discord.js.org/#/docs/main/stable/class/Client",
        "name": "client"
      }
    ],
    "longname": "FishermanOptions",
    "scope": "global",
    "$longname": "FishermanOptions"
  },
  {
    "comment": "/**\r\n * @typedef {function} FisherPromiseCallback The promise command's execution function with a promise callback\r\n * @param {FisherRequest} req A request object\r\n * @param {FisherResponse} res A response object\r\n * @param {function} resolve A promise resolve function\r\n * @param {function} reject A promise reject function\r\n */",
    "meta": {
      "filename": "register.js",
      "lineno": 180,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
      "code": {}
    },
    "kind": "typedef",
    "name": "FisherPromiseCallback",
    "type": {
      "names": [
        "function"
      ]
    },
    "description": "The promise command's execution function with a promise callback",
    "params": [
      {
        "type": {
          "names": [
            "FisherRequest"
          ]
        },
        "description": "A request object",
        "name": "req"
      },
      {
        "type": {
          "names": [
            "FisherResponse"
          ]
        },
        "description": "A response object",
        "name": "res"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A promise resolve function",
        "name": "resolve"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A promise reject function",
        "name": "reject"
      }
    ],
    "longname": "FisherPromiseCallback",
    "scope": "global",
    "$longname": "FisherPromiseCallback"
  },
  {
    "comment": "/**\r\n * A register, to add commands to fisherman extending the Map class\r\n * The commands added are storen directly in the map\r\n * @class FisherRegister\r\n * @extends {Map}\r\n */",
    "meta": {
      "filename": "register.js",
      "lineno": 2,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
      "code": {}
    },
    "description": "A register, to add commands to fisherman extending the Map class\rThe commands added are storen directly in the map",
    "kind": "class",
    "name": "FisherRegister",
    "augments": [
      "Map"
    ],
    "longname": "FisherRegister",
    "scope": "global",
    "$longname": "FisherRegister",
    "$members": [
      {
        "comment": "/**\r\n     * Add a command to fisherman, through an object or an command class extending the abstract class \"Command\"\r\n     * @param {(Object|Command)} command An object, or a class extending the abstract class \"Command\"\r\n     * @memberof FisherRegister\r\n     */",
        "meta": {
          "range": [
            4776,
            4908
          ],
          "filename": "register.js",
          "lineno": 113,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100001511",
            "name": "FisherRegister#addCommand",
            "type": "MethodDefinition",
            "paramnames": [
              "command"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Add a command to fisherman, through an object or an command class extending the abstract class \"Command\"",
        "params": [
          {
            "type": {
              "names": [
                "Object",
                "Command"
              ]
            },
            "description": "An object, or a class extending the abstract class \"Command\"",
            "name": "command"
          }
        ],
        "memberof": "FisherRegister",
        "name": "addCommand",
        "longname": "FisherRegister#addCommand",
        "kind": "function",
        "scope": "instance",
        "$longname": "FisherRegister#addCommand"
      },
      {
        "comment": "/**\r\n       * The fisherman client that instantied the register\r\n       * @name FisherRegister#client\r\n       * @type {Fisherman}\r\n       */",
        "meta": {
          "filename": "register.js",
          "lineno": 19,
          "columnno": 6,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "The fisherman client that instantied the register",
        "name": "client",
        "type": {
          "names": [
            "Fisherman"
          ]
        },
        "memberof": "FisherRegister",
        "longname": "FisherRegister#client",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRegister#client"
      },
      {
        "comment": "/**\r\n     * A command, specified by the name and the scope.\r\n     * @example command([\"dm\", \"text\"], \"cat\", null, function(req, res){});\r\n     * @param {(string[]|string)} scope The channel type, can be an array or a string\r\n     * @param {string} name The command's name\r\n     * @param {DefaultCommandOptions} [options = {}] An option object, that will be asigned with DefaultCommandOptions\r\n     * @param {FisherCallback} callback A FisherCallback\r\n     * @return {FisherRegister} Return the current register\r\n     * @memberof FisherRegister\r\n     */",
        "meta": {
          "range": [
            2704,
            3280
          ],
          "filename": "register.js",
          "lineno": 72,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100001316",
            "name": "FisherRegister#command",
            "type": "MethodDefinition",
            "paramnames": [
              "scope",
              "name",
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "A command, specified by the name and the scope.",
        "examples": [
          "command([\"dm\", \"text\"], \"cat\", null, function(req, res){});"
        ],
        "params": [
          {
            "type": {
              "names": [
                "Array.<string>",
                "string"
              ]
            },
            "description": "The channel type, can be an array or a string",
            "name": "scope"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The command's name",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "DefaultCommandOptions"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "An option object, that will be asigned with DefaultCommandOptions",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "FisherCallback"
              ]
            },
            "description": "A FisherCallback",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FisherRegister"
              ]
            },
            "description": "Return the current register"
          }
        ],
        "memberof": "FisherRegister",
        "name": "command",
        "longname": "FisherRegister#command",
        "kind": "function",
        "scope": "instance",
        "$longname": "FisherRegister#command"
      },
      {
        "comment": "/**\r\n         * The register description, used by commands, like \"help\"\r\n         * @name FisherRegister#description\r\n         * @type {string}\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "register.js",
          "lineno": 25,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "The register description, used by commands, like \"help\"",
        "name": "description",
        "type": {
          "names": [
            "string"
          ]
        },
        "defaultvalue": "null",
        "memberof": "FisherRegister",
        "longname": "FisherRegister#description",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRegister#description"
      },
      {
        "comment": "/**\r\n         * The register name, used by commands, like \"help\"\r\n         * @name FisherRegister#name\r\n         * @type {string}\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "register.js",
          "lineno": 32,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {}
        },
        "description": "The register name, used by commands, like \"help\"",
        "name": "name",
        "type": {
          "names": [
            "string"
          ]
        },
        "defaultvalue": "null",
        "memberof": "FisherRegister",
        "longname": "FisherRegister#name",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRegister#name"
      },
      {
        "comment": "/**\r\n   * A command, that can be resolved/rejected. It triggers fishercodes when it's resolved/rejected\r\n   * @example command([\"dm\", \"text\"], \"cat\", null, function(req, res, resolve, reject){});\r\n   * @param {(string[]|string)} scope The channel type, can be an array or a string\r\n   * @param {string} name The command's name\r\n   * @param {DefaultCommandOptions} [options = {}] An option object, that will be asigned with DefaultCommandOptions\r\n   * @param {FisherPromiseCallback} callback A FisherPromiseCallback\r\n   * @return {FisherRegister} Return the current register\r\n   * @memberof FisherRegister\r\n   */",
        "meta": {
          "range": [
            3899,
            4505
          ],
          "filename": "register.js",
          "lineno": 95,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100001411",
            "name": "FisherRegister#promiseCommand",
            "type": "MethodDefinition",
            "paramnames": [
              "scope",
              "name",
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "A command, that can be resolved/rejected. It triggers fishercodes when it's resolved/rejected",
        "examples": [
          "command([\"dm\", \"text\"], \"cat\", null, function(req, res, resolve, reject){});"
        ],
        "params": [
          {
            "type": {
              "names": [
                "Array.<string>",
                "string"
              ]
            },
            "description": "The channel type, can be an array or a string",
            "name": "scope"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The command's name",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "DefaultCommandOptions"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "An option object, that will be asigned with DefaultCommandOptions",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "FisherPromiseCallback"
              ]
            },
            "description": "A FisherPromiseCallback",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FisherRegister"
              ]
            },
            "description": "Return the current register"
          }
        ],
        "memberof": "FisherRegister",
        "name": "promiseCommand",
        "longname": "FisherRegister#promiseCommand",
        "kind": "function",
        "scope": "instance",
        "$longname": "FisherRegister#promiseCommand"
      },
      {
        "comment": "/**\r\n     * A text command that can be only executed in a guild\r\n     * @example textCommand(\"cat\", null, function(req,res) {});\r\n     * @param {string} name The command's name\r\n     * @param {DefaultCommandOptions} [options = {} ] An option object, that will be asigned with defaultCommandOptions\r\n     * @param {FisherCallback} callback A FisherCallback\r\n     * @return {FisherRegister} Return the current register\r\n     */",
        "meta": {
          "range": [
            1651,
            2142
          ],
          "filename": "register.js",
          "lineno": 48,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
          "code": {
            "id": "astnode100001235",
            "name": "FisherRegister#textCommand",
            "type": "MethodDefinition",
            "paramnames": [
              "name",
              "options",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "A text command that can be only executed in a guild",
        "examples": [
          "textCommand(\"cat\", null, function(req,res) {});"
        ],
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The command's name",
            "name": "name"
          },
          {
            "type": {
              "names": [
                "DefaultCommandOptions"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "description": "An option object, that will be asigned with defaultCommandOptions",
            "name": "options"
          },
          {
            "type": {
              "names": [
                "FisherCallback"
              ]
            },
            "description": "A FisherCallback",
            "name": "callback"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FisherRegister"
              ]
            },
            "description": "Return the current register"
          }
        ],
        "name": "textCommand",
        "longname": "FisherRegister#textCommand",
        "kind": "function",
        "memberof": "FisherRegister",
        "scope": "instance",
        "$longname": "FisherRegister#textCommand"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of FisherRegister.\r\n     * @param {Fisherman} client\r\n     * @param {string} [name = null]\r\n     * @param {string} [desc = null]\r\n     * @memberof FisherRegister\r\n     */",
    "meta": {
      "range": [
        495,
        1216
      ],
      "filename": "register.js",
      "lineno": 16,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib",
      "code": {
        "id": "astnode100001196",
        "name": "FisherRegister",
        "type": "MethodDefinition",
        "paramnames": [
          "client",
          "name",
          "desc"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of FisherRegister.",
    "params": [
      {
        "type": {
          "names": [
            "Fisherman"
          ]
        },
        "name": "client"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "name": "name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": null,
        "name": "desc"
      }
    ],
    "memberof": "FisherRegister",
    "name": "FisherRegister",
    "longname": "FisherRegister.FisherRegister",
    "kind": "class",
    "scope": "static",
    "$longname": "FisherRegister.FisherRegister"
  },
  {
    "comment": "/**\r\n * The FisherRequest used in a fisherCallback\r\n * @class FisherRequest\r\n */",
    "meta": {
      "filename": "request.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
      "code": {}
    },
    "description": "The FisherRequest used in a fisherCallback",
    "kind": "class",
    "name": "FisherRequest",
    "longname": "FisherRequest",
    "scope": "global",
    "$longname": "FisherRequest",
    "$members": [
      {
        "comment": "/**\r\n         * The discord.js channel\r\n         * @name FisherRequest#channel\r\n         * @type {GuildChannel}\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "request.js",
          "lineno": 40,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "The discord.js channel",
        "name": "channel",
        "type": {
          "names": [
            "GuildChannel"
          ]
        },
        "defaultvalue": "null",
        "memberof": "FisherRequest",
        "longname": "FisherRequest#channel",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRequest#channel"
      },
      {
        "comment": "/**\r\n         * The Fisherman client\r\n         * @name FisherRequest#client\r\n         * @type {Fisherman}\r\n         */",
        "meta": {
          "filename": "request.js",
          "lineno": 54,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "The Fisherman client",
        "name": "client",
        "type": {
          "names": [
            "Fisherman"
          ]
        },
        "memberof": "FisherRequest",
        "longname": "FisherRequest#client",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRequest#client"
      },
      {
        "comment": "/**\r\n         * the command if there is one\r\n         * @name FisherRequest#command\r\n         * @type {Command}\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "request.js",
          "lineno": 19,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "the command if there is one",
        "name": "command",
        "type": {
          "names": [
            "Command"
          ]
        },
        "defaultvalue": "null",
        "memberof": "FisherRequest",
        "longname": "FisherRequest#command",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRequest#command"
      },
      {
        "comment": "/**\r\n         * is it a command\r\n         * @name FisherRequest#isCommand\r\n         * @type {boolean}\r\n         * @default false\r\n         * @readonly\r\n         */",
        "meta": {
          "filename": "request.js",
          "lineno": 11,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "is it a command",
        "name": "isCommand",
        "type": {
          "names": [
            "boolean"
          ]
        },
        "defaultvalue": "false",
        "readonly": true,
        "memberof": "FisherRequest",
        "longname": "FisherRequest#isCommand",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRequest#isCommand"
      },
      {
        "comment": "/**\r\n         * The dicord.js message\r\n         * @name FisherRequest#message\r\n         * @type {Message}\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "request.js",
          "lineno": 47,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "The dicord.js message",
        "name": "message",
        "type": {
          "names": [
            "Message"
          ]
        },
        "defaultvalue": "null",
        "memberof": "FisherRequest",
        "longname": "FisherRequest#message",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRequest#message"
      },
      {
        "comment": "/**\r\n         * the prefix trigered\r\n         * @name FisherRequest#prefix\r\n         * @type {string}\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "request.js",
          "lineno": 33,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "the prefix trigered",
        "name": "prefix",
        "type": {
          "names": [
            "string"
          ]
        },
        "defaultvalue": "null",
        "memberof": "FisherRequest",
        "longname": "FisherRequest#prefix",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRequest#prefix"
      },
      {
        "comment": "/**\r\n         * the register of the command\r\n         * @name FisherRequest#register\r\n         * @type {FisherRegister}\r\n         * @default null\r\n         */",
        "meta": {
          "filename": "request.js",
          "lineno": 26,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "the register of the command",
        "name": "register",
        "type": {
          "names": [
            "FisherRegister"
          ]
        },
        "defaultvalue": "null",
        "memberof": "FisherRequest",
        "longname": "FisherRequest#register",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRequest#register"
      }
    ],
    "$constructor": {
      "comment": "/**\r\n     * Creates an instance of FisherRequest.\r\n     * @param {Fisherman} client\r\n     */",
      "meta": {
        "range": [
          205,
          1540
        ],
        "filename": "request.js",
        "lineno": 10,
        "columnno": 2,
        "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
        "code": {
          "id": "astnode100001798",
          "name": "FisherRequest",
          "type": "MethodDefinition",
          "paramnames": [
            "client"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates an instance of FisherRequest.",
      "params": [
        {
          "type": {
            "names": [
              "Fisherman"
            ]
          },
          "name": "client"
        }
      ],
      "name": "FisherRequest",
      "longname": "FisherRequest",
      "kind": "class",
      "scope": "global",
      "$longname": "FisherRequest"
    }
  },
  {
    "comment": "/**\r\n *\r\n * The FisheReponse used in a fisherCallback\r\n * @class FisherResponse\r\n */",
    "meta": {
      "filename": "response.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
      "code": {}
    },
    "description": "The FisheReponse used in a fisherCallback",
    "kind": "class",
    "name": "FisherResponse",
    "longname": "FisherResponse",
    "scope": "global",
    "$longname": "FisherResponse",
    "$members": [
      {
        "comment": "/**\r\n     *\r\n     * Same as channel.send()\r\n     * @see https://discord.js.org/#/docs/main/stable/class/TextChannel?scrollTo=send\r\n     * @param {string} text\r\n     * @param {Object} [data = {}]\r\n     * @returns {Promise<Message|Message[]>}\r\n     * @memberof FisherResponse\r\n     */",
        "meta": {
          "range": [
            1400,
            1486
          ],
          "filename": "response.js",
          "lineno": 52,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {
            "id": "astnode100001899",
            "name": "FisherResponse#send",
            "type": "MethodDefinition",
            "paramnames": [
              "text",
              "data"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Same as channel.send()",
        "see": [
          "https://discord.js.org/#/docs/main/stable/class/TextChannel?scrollTo=send"
        ],
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "name": "text"
          },
          {
            "type": {
              "names": [
                "Object"
              ]
            },
            "optional": true,
            "defaultvalue": "{}",
            "name": "data"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<(Message|Array.<Message>)>"
              ]
            }
          }
        ],
        "memberof": "FisherResponse",
        "name": "send",
        "longname": "FisherResponse#send",
        "kind": "function",
        "scope": "instance",
        "$longname": "FisherResponse#send"
      },
      {
        "comment": "/**\r\n     *\r\n     * Emit a \"fisherCode\" event\r\n     * @param {(number|FisherCode)} code The code to send\r\n     * @param {Error} [err = null] An error to pass\r\n     * @fires Fisherman#fisherCode\r\n     * @memberof FisherResponse\r\n     */",
        "meta": {
          "range": [
            737,
            1106
          ],
          "filename": "response.js",
          "lineno": 32,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {
            "id": "astnode100001878",
            "name": "FisherResponse#sendCode",
            "type": "MethodDefinition",
            "paramnames": [
              "code",
              "err"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Emit a \"fisherCode\" event",
        "params": [
          {
            "type": {
              "names": [
                "number",
                "FisherCode"
              ]
            },
            "description": "The code to send",
            "name": "code"
          },
          {
            "type": {
              "names": [
                "Error"
              ]
            },
            "optional": true,
            "defaultvalue": null,
            "description": "An error to pass",
            "name": "err"
          }
        ],
        "fires": [
          "Fisherman#event:fisherCode"
        ],
        "memberof": "FisherResponse",
        "name": "sendCode",
        "longname": "FisherResponse#sendCode",
        "kind": "function",
        "scope": "instance",
        "$longname": "FisherResponse#sendCode"
      }
    ],
    "$constructor": {
      "comment": "/**\r\n     * Creates an instance of FisherResponse.\r\n     * @param {Fisherman} client\r\n     * @param {FisherRouter} router\r\n     */",
      "meta": {
        "range": [
          248,
          492
        ],
        "filename": "response.js",
        "lineno": 12,
        "columnno": 2,
        "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
        "code": {
          "id": "astnode100001860",
          "name": "FisherResponse",
          "type": "MethodDefinition",
          "paramnames": [
            "client",
            "router"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates an instance of FisherResponse.",
      "params": [
        {
          "type": {
            "names": [
              "Fisherman"
            ]
          },
          "name": "client"
        },
        {
          "type": {
            "names": [
              "FisherRouter"
            ]
          },
          "name": "router"
        }
      ],
      "name": "FisherResponse",
      "longname": "FisherResponse",
      "kind": "class",
      "scope": "global",
      "$longname": "FisherResponse"
    }
  },
  {
    "comment": "/**\r\n *\r\n *  The router that contains the request and the response\r\n * @class FisherRouter\r\n */",
    "meta": {
      "filename": "router.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
      "code": {}
    },
    "description": "The router that contains the request and the response",
    "kind": "class",
    "name": "FisherRouter",
    "longname": "FisherRouter",
    "scope": "global",
    "$longname": "FisherRouter",
    "$members": [
      {
        "comment": "/**\r\n     * Build a router from a discord.js message\r\n     *\r\n     * @static\r\n     * @param {Fisherman} client The fisherman instance\r\n     * @param {Message} message Discord.js message\r\n     * @return {FisherRouter}\r\n     * @memberof FisherRouter\r\n     */",
        "meta": {
          "range": [
            1169,
            1355
          ],
          "filename": "router.js",
          "lineno": 43,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {
            "id": "astnode100001971",
            "name": "FisherRouter.buildFromMessage",
            "type": "MethodDefinition",
            "paramnames": [
              "client",
              "message"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Build a router from a discord.js message",
        "scope": "static",
        "params": [
          {
            "type": {
              "names": [
                "Fisherman"
              ]
            },
            "description": "The fisherman instance",
            "name": "client"
          },
          {
            "type": {
              "names": [
                "Message"
              ]
            },
            "description": "Discord.js message",
            "name": "message"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "FisherRouter"
              ]
            }
          }
        ],
        "memberof": "FisherRouter",
        "name": "buildFromMessage",
        "longname": "FisherRouter.buildFromMessage",
        "kind": "function",
        "$longname": "FisherRouter.buildFromMessage"
      },
      {
        "comment": "/**\r\n   * Return the FisherRequest Class used to instantiate the FisherRequest\r\n   * @static\r\n   * @returns {FisherRequest}\r\n   * @memberof FisherRouter\r\n   */",
        "meta": {
          "range": [
            1522,
            1584
          ],
          "filename": "router.js",
          "lineno": 55,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {
            "id": "astnode100002003",
            "name": "FisherRouter.getRequestInstancer",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Return the FisherRequest Class used to instantiate the FisherRequest",
        "scope": "static",
        "returns": [
          {
            "type": {
              "names": [
                "FisherRequest"
              ]
            }
          }
        ],
        "memberof": "FisherRouter",
        "name": "getRequestInstancer",
        "longname": "FisherRouter.getRequestInstancer",
        "kind": "function",
        "params": [],
        "$longname": "FisherRouter.getRequestInstancer"
      },
      {
        "comment": "/**\r\n   * Return the FisherResponse Class to instantiate the FisherResponse\r\n   * @static\r\n   * @returns {FisherReponse}\r\n   * @memberof FisherRouter\r\n   */",
        "meta": {
          "range": [
            1748,
            1812
          ],
          "filename": "router.js",
          "lineno": 64,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {
            "id": "astnode100002009",
            "name": "FisherRouter.getResponseInstancer",
            "type": "MethodDefinition",
            "paramnames": []
          },
          "vars": {
            "": null
          }
        },
        "description": "Return the FisherResponse Class to instantiate the FisherResponse",
        "scope": "static",
        "returns": [
          {
            "type": {
              "names": [
                "FisherReponse"
              ]
            }
          }
        ],
        "memberof": "FisherRouter",
        "name": "getResponseInstancer",
        "longname": "FisherRouter.getResponseInstancer",
        "kind": "function",
        "params": [],
        "$longname": "FisherRouter.getResponseInstancer"
      },
      {
        "comment": "/**\r\n         * The fisherman client that instantied the router\r\n         * @name FisherRouter#client\r\n         * @type {Fisherman}\r\n         */",
        "meta": {
          "filename": "router.js",
          "lineno": 15,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "The fisherman client that instantied the router",
        "name": "client",
        "type": {
          "names": [
            "Fisherman"
          ]
        },
        "memberof": "FisherRouter",
        "longname": "FisherRouter#client",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRouter#client"
      },
      {
        "comment": "/**\r\n         * The FisherRequest\r\n         * @name FisherRouter#request\r\n         * @type {FisherRequest}\r\n         */",
        "meta": {
          "filename": "router.js",
          "lineno": 21,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "The FisherRequest",
        "name": "request",
        "type": {
          "names": [
            "FisherRequest"
          ]
        },
        "memberof": "FisherRouter",
        "longname": "FisherRouter#request",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRouter#request"
      },
      {
        "comment": "/**\r\n         * The FisherResponse\r\n         * @name FisherRouter#response\r\n         * @type {FisherResponse}\r\n         */",
        "meta": {
          "filename": "router.js",
          "lineno": 27,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
          "code": {}
        },
        "description": "The FisherResponse",
        "name": "response",
        "type": {
          "names": [
            "FisherResponse"
          ]
        },
        "memberof": "FisherRouter",
        "longname": "FisherRouter#response",
        "scope": "instance",
        "kind": "member",
        "$longname": "FisherRouter#response"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of FisherRouter.\r\n     * @param {Fisherman} client\r\n     * @memberof FisherRouter\r\n     */",
    "meta": {
      "range": [
        335,
        903
      ],
      "filename": "router.js",
      "lineno": 14,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router",
      "code": {
        "id": "astnode100001943",
        "name": "FisherRouter",
        "type": "MethodDefinition",
        "paramnames": [
          "client"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of FisherRouter.",
    "params": [
      {
        "type": {
          "names": [
            "Fisherman"
          ]
        },
        "name": "client"
      }
    ],
    "memberof": "FisherRouter",
    "name": "FisherRouter",
    "longname": "FisherRouter.FisherRouter",
    "kind": "class",
    "scope": "static",
    "$longname": "FisherRouter.FisherRouter"
  },
  {
    "comment": "/**\r\n * When the channel type is not the one defined for the command\r\n *\r\n * @class InvalidChannelException\r\n * @extends {Error}\r\n */",
    "meta": {
      "filename": "InvalidChannelException.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {}
    },
    "description": "When the channel type is not the one defined for the command",
    "kind": "class",
    "name": "InvalidChannelException",
    "augments": [
      "Error"
    ],
    "longname": "InvalidChannelException",
    "scope": "global",
    "$longname": "InvalidChannelException",
    "$members": [
      {
        "comment": "/**\r\n         * The channel type required\r\n         * @type {string}\r\n         * @name InvalidChannelException#channelRequired\r\n         * @readonly\r\n         */",
        "meta": {
          "filename": "InvalidChannelException.js",
          "lineno": 15,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The channel type required",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "channelRequired",
        "readonly": true,
        "memberof": "InvalidChannelException",
        "longname": "InvalidChannelException#channelRequired",
        "scope": "instance",
        "kind": "member",
        "$longname": "InvalidChannelException#channelRequired"
      },
      {
        "comment": "/**\r\n         * The fisherCode\r\n         * @readonly\r\n         * @constant\r\n         * @name InvalidChannelException#code\r\n         * @type {number}\r\n         * @default 400\r\n         */",
        "meta": {
          "filename": "InvalidChannelException.js",
          "lineno": 22,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The fisherCode",
        "readonly": true,
        "kind": "constant",
        "name": "code",
        "type": {
          "names": [
            "number"
          ]
        },
        "defaultvalue": "400",
        "memberof": "InvalidChannelException",
        "longname": "InvalidChannelException#code",
        "scope": "instance",
        "$longname": "InvalidChannelException#code"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of InvalidChannelException.\r\n     * @param {string} channel The channel type. See https://discord.js.org/#/docs/main/stable/class/Channel?scrollTo=type\r\n     * @memberof InvalidChannelException\r\n     */",
    "meta": {
      "range": [
        424,
        946
      ],
      "filename": "InvalidChannelException.js",
      "lineno": 13,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {
        "id": "astnode100000041",
        "name": "InvalidChannelException",
        "type": "MethodDefinition",
        "paramnames": [
          "channel"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of InvalidChannelException.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The channel type. See https://discord.js.org/#/docs/main/stable/class/Channel?scrollTo=type",
        "name": "channel"
      }
    ],
    "memberof": "InvalidChannelException",
    "name": "InvalidChannelException",
    "longname": "InvalidChannelException.InvalidChannelException",
    "kind": "class",
    "scope": "static",
    "$longname": "InvalidChannelException.InvalidChannelException"
  },
  {
    "comment": "/**\r\n * When a pattern is not respected, of a command\r\n *\r\n * @class InvalidPatternException\r\n * @extends {Error}\r\n */",
    "meta": {
      "filename": "InvalidPatternException.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {}
    },
    "description": "When a pattern is not respected, of a command",
    "kind": "class",
    "name": "InvalidPatternException",
    "augments": [
      "Error"
    ],
    "longname": "InvalidPatternException",
    "scope": "global",
    "$longname": "InvalidPatternException",
    "$members": [
      {
        "comment": "/**\r\n         * The fisherCode\r\n         * @readonly\r\n         * @constant\r\n         * @name InvalidPatternException#code\r\n         * @type {number}\r\n         * @default 303\r\n         */",
        "meta": {
          "filename": "InvalidPatternException.js",
          "lineno": 22,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The fisherCode",
        "readonly": true,
        "kind": "constant",
        "name": "code",
        "type": {
          "names": [
            "number"
          ]
        },
        "defaultvalue": "303",
        "memberof": "InvalidPatternException",
        "longname": "InvalidPatternException#code",
        "scope": "instance",
        "$longname": "InvalidPatternException#code"
      },
      {
        "comment": "/**\r\n         * The suffixe that doesn't match\r\n         * @type {string}\r\n         * @name InvalidPatternException#suffixe\r\n         * @readonly\r\n         */",
        "meta": {
          "filename": "InvalidPatternException.js",
          "lineno": 15,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The suffixe that doesn't match",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "suffixe",
        "readonly": true,
        "memberof": "InvalidPatternException",
        "longname": "InvalidPatternException#suffixe",
        "scope": "instance",
        "kind": "member",
        "$longname": "InvalidPatternException#suffixe"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of InvalidPatternException.\r\n     * @param {string} suffixe The command's suffixe\r\n     * @memberof InvalidPatternException\r\n     */",
    "meta": {
      "range": [
        339,
        847
      ],
      "filename": "InvalidPatternException.js",
      "lineno": 13,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {
        "id": "astnode100000076",
        "name": "InvalidPatternException",
        "type": "MethodDefinition",
        "paramnames": [
          "suffixe"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of InvalidPatternException.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The command's suffixe",
        "name": "suffixe",
        "defaultvalue": null
      }
    ],
    "memberof": "InvalidPatternException",
    "name": "InvalidPatternException",
    "longname": "InvalidPatternException.InvalidPatternException",
    "kind": "class",
    "scope": "static",
    "$longname": "InvalidPatternException.InvalidPatternException"
  },
  {
    "comment": "/**\r\n * An MissingPermissionsException, when the command require special discord permissions\r\n *\r\n * @class MissingPermissionsException\r\n * @extends {Error}\r\n */",
    "meta": {
      "filename": "MissingPermissionsException.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {}
    },
    "description": "An MissingPermissionsException, when the command require special discord permissions",
    "kind": "class",
    "name": "MissingPermissionsException",
    "augments": [
      "Error"
    ],
    "longname": "MissingPermissionsException",
    "scope": "global",
    "$longname": "MissingPermissionsException",
    "$members": [
      {
        "comment": "/**\r\n         * The fisherCode\r\n         * @type {number}\r\n         * @readonly\r\n         * @name MissingPermissionsException#code\r\n         * @constant\r\n         * @default 403\r\n         */",
        "meta": {
          "filename": "MissingPermissionsException.js",
          "lineno": 22,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The fisherCode",
        "type": {
          "names": [
            "number"
          ]
        },
        "readonly": true,
        "name": "code",
        "kind": "constant",
        "defaultvalue": "403",
        "memberof": "MissingPermissionsException",
        "longname": "MissingPermissionsException#code",
        "scope": "instance",
        "$longname": "MissingPermissionsException#code"
      },
      {
        "comment": "/**\r\n         * The missing permissions\r\n         * @type {(Array|string)}\r\n         * @name MissingPermissionsException#missingPermissions\r\n         * @readonly\r\n         */",
        "meta": {
          "filename": "MissingPermissionsException.js",
          "lineno": 15,
          "columnno": 8,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
          "code": {}
        },
        "description": "The missing permissions",
        "type": {
          "names": [
            "Array",
            "string"
          ]
        },
        "name": "missingPermissions",
        "readonly": true,
        "memberof": "MissingPermissionsException",
        "longname": "MissingPermissionsException#missingPermissions",
        "scope": "instance",
        "kind": "member",
        "$longname": "MissingPermissionsException#missingPermissions"
      }
    ]
  },
  {
    "comment": "/**\r\n     * Creates an instance of MissingPermissionsException.\r\n     * @param {(Array<string>|string)} missing the missing perms\r\n     * @memberof MissingPermissionsException\r\n     */",
    "meta": {
      "range": [
        406,
        956
      ],
      "filename": "MissingPermissionsException.js",
      "lineno": 13,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions",
      "code": {
        "id": "astnode100000113",
        "name": "MissingPermissionsException",
        "type": "MethodDefinition",
        "paramnames": [
          "missing"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of MissingPermissionsException.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<string>",
            "string"
          ]
        },
        "description": "the missing perms",
        "name": "missing"
      }
    ],
    "memberof": "MissingPermissionsException",
    "name": "MissingPermissionsException",
    "longname": "MissingPermissionsException.MissingPermissionsException",
    "kind": "class",
    "scope": "static",
    "$longname": "MissingPermissionsException.MissingPermissionsException"
  },
  {
    "kind": "package",
    "name": "fisherman-discord.js",
    "longname": "package:fisherman-discord.js",
    "author": "Simon Sassi",
    "dependencies": {
      "async": "^2.5.0",
      "discord.js": "^11.2.0",
      "fastfall": "^1.5.1",
      "lodash": "^4.17.4"
    },
    "description": "Fisherman: A Discord command router, inspired by expressjs | Discord.js library base",
    "devDependencies": {
      "standard": "latest",
      "eslint": "latest"
    },
    "files": [
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions\\CommandNotFoundException.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions\\InvalidChannelException.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions\\InvalidPatternException.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\exceptions\\MissingPermissionsException.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\fisherman.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\register.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router\\request.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router\\response.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\router\\router.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure\\AbstractMiddleware.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure\\Command.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure\\PatternCallback.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util\\DefaultCommandOptions.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util\\FisherCodes.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util\\FishermanOptions.js",
      "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util\\RegExpEscape.js"
    ],
    "homepage": "https://maxerbox.github.io/fisherman-discord.js/",
    "licenses": [
      {
        "type": "ISC"
      }
    ],
    "main": "./index.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/maxerbox/fisherman-discord.js.git"
    },
    "version": "1.0.5",
    "$longname": "package:fisherman-discord.js"
  },
  {
    "comment": "/**\r\n * A class used for the pattern callback matching\r\n * @abstract\r\n * @class PatternCallback\r\n */",
    "meta": {
      "filename": "PatternCallback.js",
      "lineno": 1,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
      "code": {}
    },
    "description": "A class used for the pattern callback matching",
    "virtual": true,
    "kind": "class",
    "name": "PatternCallback",
    "longname": "PatternCallback",
    "scope": "global",
    "$longname": "PatternCallback",
    "$members": [
      {
        "comment": "/**\r\n     * Used to capture all the parameters\r\n     * @example callback({});\r\n     * @param {string} suffix the suffix of the command\r\n     * @param {function} callback A callback, where you have to return the captured parameters\r\n     * @memberof PatternCallback\r\n     */",
        "meta": {
          "range": [
            996,
            1028
          ],
          "filename": "PatternCallback.js",
          "lineno": 31,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {
            "id": "astnode100002169",
            "name": "PatternCallback#exec",
            "type": "MethodDefinition",
            "paramnames": [
              "suffix",
              "callback"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Used to capture all the parameters",
        "examples": [
          "callback({});"
        ],
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "the suffix of the command",
            "name": "suffix"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A callback, where you have to return the captured parameters",
            "name": "callback"
          }
        ],
        "memberof": "PatternCallback",
        "name": "exec",
        "longname": "PatternCallback#exec",
        "kind": "function",
        "scope": "instance",
        "$longname": "PatternCallback#exec"
      },
      {
        "comment": "/**\r\n     * Used to match with the suffix, if true is returned with validate, the command is matched\r\n     * @example validate(false);\r\n     * @param {string} suffix the suffix of the command\r\n     * @param {function} validate A callback, where you have to return true or false\r\n     * @memberof PatternCallback\r\n     */",
        "meta": {
          "range": [
            681,
            713
          ],
          "filename": "PatternCallback.js",
          "lineno": 21,
          "columnno": 2,
          "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
          "code": {
            "id": "astnode100002163",
            "name": "PatternCallback#test",
            "type": "MethodDefinition",
            "paramnames": [
              "suffix",
              "validate"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Used to match with the suffix, if true is returned with validate, the command is matched",
        "examples": [
          "validate(false);"
        ],
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "the suffix of the command",
            "name": "suffix"
          },
          {
            "type": {
              "names": [
                "function"
              ]
            },
            "description": "A callback, where you have to return true or false",
            "name": "validate"
          }
        ],
        "memberof": "PatternCallback",
        "name": "test",
        "longname": "PatternCallback#test",
        "kind": "function",
        "scope": "instance",
        "$longname": "PatternCallback#test"
      }
    ]
  },
  {
    "comment": "/**\r\n   * Creates an instance of PatternCallback.\r\n   * @memberof PatternCallback\r\n   */",
    "meta": {
      "range": [
        221,
        351
      ],
      "filename": "PatternCallback.js",
      "lineno": 11,
      "columnno": 2,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\structure",
      "code": {
        "id": "astnode100002151",
        "name": "PatternCallback",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates an instance of PatternCallback.",
    "memberof": "PatternCallback",
    "name": "PatternCallback",
    "longname": "PatternCallback.PatternCallback",
    "kind": "class",
    "scope": "static",
    "params": [],
    "$longname": "PatternCallback.PatternCallback"
  },
  {
    "comment": "/**\r\n * Some utils to escape prefixes\r\n *\r\n * @class RegExpEscape\r\n */",
    "meta": {
      "filename": "RegExpEscape.js",
      "lineno": 2,
      "columnno": 0,
      "path": "C:\\Users\\Simon\\Desktop\\FisherMan\\lib\\util",
      "code": {}
    },
    "description": "Some utils to escape prefixes",
    "kind": "class",
    "name": "RegExpEscape",
    "longname": "RegExpEscape",
    "scope": "global",
    "$longname": "RegExpEscape"
  }
]